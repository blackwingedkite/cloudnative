{
  "version": 3,
  "sources": ["../../node_modules/ldrs/temp-ts-out/elements/ring2.js", "../../node_modules/ldrs/temp-ts-out/auto/ring2.js"],
  "sourcesContent": ["import Base from '../lib/LdrsBaseElement.js';\nimport styles from './ring2.scss';\nclass Ring2 extends Base {\n    _attributes = [\n        'size',\n        'color',\n        'speed',\n        'stroke',\n        'stroke-length',\n        'bg-opacity',\n    ];\n    size;\n    color;\n    speed;\n    stroke;\n    'stroke-length';\n    'bg-opacity';\n    static get observedAttributes() {\n        return ['size', 'color', 'stroke', 'stroke-length', 'speed', 'bg-opacity'];\n    }\n    constructor() {\n        super();\n        this.storePropsToUpgrade(this._attributes);\n        this.reflect(this._attributes);\n    }\n    connectedCallback() {\n        this.upgradeStoredProps();\n        this.applyDefaultProps({\n            size: 40,\n            color: 'black',\n            stroke: 5,\n            'stroke-length': 0.25,\n            speed: 0.8,\n            'bg-opacity': 0.1,\n        });\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = sizeInt / 2;\n        const radius = Math.max(0, sizeInt / 2 - strokeInt / 2);\n        this.template.innerHTML = `\n      <svg\n        class=\"container\"\n        viewBox=\"${centerPoint} ${centerPoint} ${this.size} ${this.size}\"\n        height=\"${this.size}\"\n        width=\"${this.size}\"\n      >\n        <circle \n          class=\"track\"\n          cx=\"${this.size}\" \n          cy=\"${this.size}\" \n          r=\"${radius}\" \n          stroke-width=\"${this.stroke}px\" \n          fill=\"none\" \n        />\n        <circle \n          class=\"car\"\n          cx=\"${this.size}\" \n          cy=\"${this.size}\" \n          r=\"${radius}\" \n          pathlength=\"100\" \n          stroke-width=\"${this.stroke}px\" \n          fill=\"none\" \n        />\n      </svg>\n      <style>\n        :host{\n          --uib-size: ${this.size}px;\n          --uib-color: ${this.color};\n          --uib-speed: ${this.speed}s;\n          --uib-dash: ${parseFloat(this['stroke-length']) * 100};\n          --uib-gap: ${100 - parseFloat(this['stroke-length']) * 100};\n          --uib-bg-opacity: ${this['bg-opacity']};\n        }\n        ${styles}\n      </style>\n    `;\n        this.shadow.replaceChildren(this.template.content.cloneNode(true));\n    }\n    attributeChangedCallback() {\n        const styleEl = this.shadow.querySelector('style');\n        const svgEl = this.shadow.querySelector('svg');\n        const circleEls = this.shadow.querySelectorAll('circle');\n        if (!styleEl)\n            return;\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = sizeInt / 2;\n        const radius = String(Math.max(0, sizeInt / 2 - strokeInt / 2));\n        svgEl.setAttribute('height', this.size);\n        svgEl.setAttribute('width', this.size);\n        svgEl.setAttribute('viewBox', `${centerPoint} ${centerPoint} ${this.size} ${this.size}`);\n        circleEls.forEach((circleEl) => {\n            circleEl.setAttribute('cx', this.size);\n            circleEl.setAttribute('cy', this.size);\n            circleEl.setAttribute('r', radius);\n            circleEl.setAttribute('stroke-width', this.stroke);\n        });\n        styleEl.innerHTML = `\n      :host{\n        --uib-size: ${this.size}px;\n        --uib-color: ${this.color};\n        --uib-speed: ${this.speed}s;\n        --uib-dash: ${parseFloat(this['stroke-length']) * 100};\n        --uib-gap: ${100 - parseFloat(this['stroke-length']) * 100};\n        --uib-bg-opacity: ${this['bg-opacity']};\n      }\n      ${styles}\n    `;\n    }\n}\nexport default {\n    register: (name = 'l-ring-2') => {\n        if (!customElements.get(name)) {\n            customElements.define(name, class extends Ring2 {\n            });\n        }\n    },\n    element: Ring2,\n};\n", "import ring2 from '../elements/ring2.js';\nring2.register();\n"],
  "mappings": "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",
  "names": ["Ring2", "Base", "constructor", "super", "_attributes", "size", "color", "speed", "stroke", "this", "storePropsToUpgrade", "reflect", "observedAttributes", "connectedCallback", "upgradeStoredProps", "applyDefaultProps", "sizeInt", "parseInt", "strokeInt", "centerPoint", "radius", "Math", "max", "template", "innerHTML", "parseFloat", "styles", "shadow", "replaceChildren", "content", "cloneNode", "attributeChangedCallback", "styleEl", "querySelector", "svgEl", "circleEls", "querySelectorAll", "String", "setAttribute", "forEach", "circleEl", "ring2", "register", "name", "customElements", "get", "define", "element", "ring2", "register"]
}
